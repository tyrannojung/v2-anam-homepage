@charset "UTF-8";
$bh_breakpoints: (
	xs: 0,
	sm: 576px,
	md: 768px,
	lg: 992px,
	xl: 1200px,
	xxl: 1400px
) !default;

$bh_wrap_max_widths: (
	0: 1200px,
	sm: 576px,
	md: 768px,
	lg: 992px,
	xl: 1200px,
	2: 1300px,
	xxl: 1400px
) !default;

$spacer: 1rem !default;
$spacers: (
	0: 0,
	5: $spacer * .5,
	10: $spacer * 1,
	15: $spacer * 1.5,
	20: $spacer * 2,
	25: $spacer * 2.5,
	30: $spacer * 3,
	35: $spacer * 3.5,
	40: $spacer * 4,
	45: $spacer * 4.5,
	50: $spacer * 5,
	55: $spacer * 5.5,
	60: $spacer * 6,
	65: $spacer * 6.5,
	70: $spacer * 7,
	75: $spacer * 7.5,
	80: $spacer * 8,
	85: $spacer * 8.5,
	90: $spacer * 9,
	95: $spacer * 9.5,
	100: $spacer * 10,
) !default;

$utilities: () !default;
$utilities: map-merge(
	(
		"padding": (
			responsive: true,
			property: padding,
			class: pd,
			values: $spacers
		),
		"padding-top": (
			responsive: true,
			property: padding-top,
			class: pt,
			values: $spacers
		),
		"padding-right": (
			responsive: true,
			property: padding-right,
			class: pr,
			values: $spacers
		),
		"padding-bottom": (
			responsive: true,
			property: padding-bottom,
			class: pb,
			values: $spacers
		),
		"padding-left": (
			responsive: true,
			property: padding-left,
			class: pl,
			values: $spacers
		),
		"padding-x": (
			responsive: true,
			property: padding-right padding-left,
			class: px,
			values: $spacers
		),
		"padding-y": (
			responsive: true,
			property: padding-top padding-bottom,
			class: py,
			values: $spacers
		),
		"margin": (
			responsive: true,
			property: margin,
			class: mg,
			values: map-merge((a: auto, "0-a": 0 auto), $spacers)
		),
		"margin-top": (
			responsive: true,
			property: margin-top,
			class: mt,
			values: map-merge((a: auto), $spacers)
		),
		"margin-right": (
			responsive: true,
			property: margin-right,
			class: mr,
			values: map-merge((a: auto), $spacers)
		),
		"margin-bottom": (
			responsive: true,
			property: margin-bottom,
			class: mb,
			values: map-merge((a: auto), $spacers)
		),
		"margin-left": (
			responsive: true,
			property: margin-left,
			class: ml,
			values: map-merge((a: auto), $spacers)
		),
		"margin-x": (
			responsive: true,
			property: margin-right margin-left,
			class: mx,
			values: map-merge((a: auto), $spacers)
		),
		"margin-y": (
			responsive: true,
			property: margin-top margin-bottom,
			class: my,
			values: map-merge((a: auto), $spacers)
		),
		"border-radius": (
			responsive: true,
			property: border-radius,
			class: round,
			values: (0: 0, 1: 1px, 2: 2px, 3: 3px, 4: 4px, 5: 5px, 6: 6px, 7: 7px, 8: 8px, 9: 9px, 10: 10px, 50: 50px, 100: 100rem)
		)
	),
	$utilities
);

$color_list: (
	main: auto,
	main_50: auto,
	main_100: auto,
	main_200: auto,
	main_300: auto,
	main_400: auto,
	main_600: auto,
	main_700: auto,
	main_800: auto,
	main_900: auto,
	main_light: auto,
	main_dark: auto,
	sub: auto,
	sub_50: auto,
	sub_100: auto,
	sub_200: auto,
	sub_300: auto,
	sub_400: auto,
	sub_600: auto,
	sub_700: auto,
	sub_800: auto,
	sub_900: auto,
	sub_light: auto,
	sub_dark: auto,
	point: auto,
	point_50: auto,
	point_100: auto,
	point_200: auto,
	point_300: auto,
	point_400: auto,
	point_600: auto,
	point_700: auto,
	point_800: auto,
	point_900: auto,
	point_light: auto,
	point_dark: auto,
	red: auto,
	blue: auto,
	text: auto,
	white: auto,
	black: auto,
	111: #111111,
	222: #222222,
	333: #333333,
	444: #444444,
	555: #555555,
	666: #666666,
	777: #777777,
	888: #888888,
	999: #999999,
	ddd: #dddddd,
	gray_50: auto,
	gray_100: auto,
	gray_200: auto,
	gray_300: auto,
	gray_400: auto,
	gray_500: auto,
	gray_600: auto,
	gray_700: auto,
	gray_800: auto,
	gray_900: auto,
	t: transparent,
) !default;

@mixin media-max($name, $breakpoints: $bh_breakpoints) {
	$max: map-get($breakpoints, $name);
	$max: if($max and $max > 0, $max - .02, null);
	@if $max {
		@media (max-width: $max) {
			@content;
		}
	} @else {
		@content;
	}
}
@mixin media-min($name, $breakpoints: $bh_breakpoints) {
	$min: map-get($breakpoints, $name);
	$min: if($min != 0, $min, null);
	@if $min {
		@media (min-width: $min) {
			@content;
		}
	} @else {
		@content;
	}
}

@function map-reverse($map) {
	$result: null;

	@if type-of($map) == "map" {
		$keys: map-keys($map);
		$map-reversed: ();

		@for $i from length($keys) through 1 {
			$map-reversed: map-merge(
				$map-reversed,
				(nth($keys, $i): map-get($map, nth($keys, $i)))
			);
		}

		@if type-of($map-reversed) == "map" {
			$result: $map-reversed;
		} @else {
			@warn 'There was an error reversing the order of "#{$map}"';
		}
	} @else {
		@warn '"#{$map}" is not a valid map';
	}

	@return $result;
}
